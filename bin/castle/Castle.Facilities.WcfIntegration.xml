<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Castle.Facilities.WcfIntegration</name>
    </assembly>
    <members>
        <member name="T:Castle.Facilities.WcfIntegration.Behaviors.IMessageAction">
            <summary>
            Basic contract for performing message actions.
            </summary>
        </member>
        <member name="T:Castle.Facilities.WcfIntegration.Behaviors.IMessageLifecyleAction">
            <summary>
            Basic contract for performing message lifecyle actions.
            </summary>
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.Behaviors.IMessageLifecyleAction.ShouldPerform(MessageLifecycle)">
            <summary>
            Determines if the action should be performed.
            </summary>
            <param name="lifecycle">The lifecycle stage.</param>
            <returns>true if action should be performed.</returns>
        </member>
        <member name="P:Castle.Facilities.WcfIntegration.Behaviors.IMessageLifecyleAction.ExecutionOrder">
            <summary>
            Gets the execution order.
            </summary>
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.Behaviors.IMessageAction.Perform(System.ServiceModel.Channels.Message@,MessageLifecycle,System.Collections.IDictionary)">
            <summary>
            Performs the action on the suppplied <paramref name="message"/>.
            </summary>
            <param name="message">The message.</param>
            <param name="lifecycle">The lifecycle stage.</param>
            <param name="state">Optional state.</param>
            <returns>true if further actions should be performed.</returns>
        </member>
        <member name="T:Castle.Facilities.WcfIntegration.Behaviors.IMessageEnvelopeAction">
            <summary>
            Basic contract for performing message actions that require access
            to the message envelope (i.e. modifications)
            </summary>
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.Behaviors.IMessageEnvelopeAction.Perform(System.ServiceModel.Channels.Message,System.Xml.XmlDocument,MessageLifecycle,System.Collections.IDictionary)">
            <summary>
            Performs the action on the suppplied <paramref name="message"/>.
            </summary>
            <param name="message">The message.</param>
            <param name="envelope">The message envelope.</param>
            <param name="lifecyle">The lifecycle stage.</param>
            <param name="state">Optional state.</param>
            <returns>true if further actions should be performed.</returns>
        </member>
        <member name="T:MessageLifecycle">
            <summary>
            Specifies the lifecycle of a message.
            </summary>
        </member>
        <member name="F:MessageLifecycle.OutgoingRequest">
            <summary>
            The outgoing request.
            </summary>
        </member>
        <member name="F:MessageLifecycle.IncomingResponse">
            <summary>
            The incoming response.
            </summary>
        </member>
        <member name="F:MessageLifecycle.IncomingRequest">
            <summary>
            The outgoing request.
            </summary>
        </member>
        <member name="F:MessageLifecycle.OutgoingResponse">
            <summary>
            The incoming response.
            </summary>
        </member>
        <member name="F:MessageLifecycle.IncomingMessages">
            <summary>
            All incoming messages.
            </summary>
        </member>
        <member name="F:MessageLifecycle.OutgoingMessages">
            <summary>
            All outgoing messages.
            </summary>
        </member>
        <member name="F:MessageLifecycle.OutgoingRequestResponse">
            <summary>
            A solitic/response exchange.
            </summary>
        </member>
        <member name="F:MessageLifecycle.IncomingRequestResponse">
            <summary>
            A request/response exchange.
            </summary>
        </member>
        <member name="F:MessageLifecycle.Requests">
            <summary>
            All requests.
            </summary>
        </member>
        <member name="F:MessageLifecycle.Responses">
            <summary>
            All requests.
            </summary>
        </member>
        <member name="F:MessageLifecycle.All">
            <summary>
            All message.
            </summary>,
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.Behaviors.MessageLifecycleBehavior`1.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
            <summary>
            Processes the client response.
            </summary>
            <param name="reply">The client response.</param>
            <param name="correlationState"></param>
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.Behaviors.MessageLifecycleBehavior`1.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
            <summary>
            Processes the client request.
            </summary>
            <param name="request">The client request.</param>
            <param name="channel"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.Behaviors.MessageLifecycleBehavior`1.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)">
            <summary>
            Processes the server request.
            </summary>
            <param name="request">The server request.</param>
            <param name="channel"></param>
            <param name="instanceContext"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.Behaviors.MessageLifecycleBehavior`1.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)">
            <summary>
            Processes the server response.
            </summary>
            <param name="reply">The server response.</param>
            <param name="correlationState"></param>
        </member>
        <member name="T:Castle.Facilities.WcfIntegration.Behaviors.LogMessageInspector">
            <summary>
            Message interceptor for logging client requests.
            </summary>
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.Behaviors.LogMessageInspector.#ctor(Castle.Core.Logging.IExtendedLogger,System.IFormatProvider,System.String)">
            <summary>
            Constructs a new <see cref="T:Castle.Facilities.WcfIntegration.Behaviors.LogMessageInspector"/>
            </summary>
            <param name="logger">The logger.</param>
            <param name="formatter">The formatter.</param>
            <param name="format">The format.</param>
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.Behaviors.LogMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
            <summary>
            Logs the outgoing request.
            </summary>
            <param name="request"></param>
            <param name="channel"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.Behaviors.LogMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
            <summary>
            Logs the incoming response.
            </summary>
            <param name="reply"></param>
            <param name="correlationState"></param>
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.Behaviors.LogMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)">
            <summary>
            Logs the incoming request.
            </summary>
            <param name="request"></param>
            <param name="channel"></param>
            <param name="instanceContext"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.Behaviors.LogMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)">
            <summary>
            Logs the outgoing response.
            </summary>
            <param name="reply"></param>
            <param name="correlationState"></param>
        </member>
        <member name="T:Castle.Facilities.WcfIntegration.WcfExtensionScope">
            <summary>
            Determines how a global extension will be applied.
            </summary>
        </member>
        <member name="F:Castle.Facilities.WcfIntegration.WcfExtensionScope.Undefined">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="F:Castle.Facilities.WcfIntegration.WcfExtensionScope.Clients">
            <summary>
            Only apply to client endpoints.
            </summary>
        </member>
        <member name="F:Castle.Facilities.WcfIntegration.WcfExtensionScope.Services">
            <summary>
            Only apply to service hosts.
            </summary>
        </member>
        <member name="F:Castle.Facilities.WcfIntegration.WcfExtensionScope.Explicit">
            <summary>
            Do not apply automatically.
            </summary>
        </member>
        <member name="T:Castle.Facilities.WcfIntegration.DefaultChannelBuilder">
            <summary>
            The default implementation of <see cref="T:Castle.Facilities.WcfIntegration.IClientChannelBuilder`1"/>.
            </summary>
        </member>
        <member name="T:Castle.Facilities.WcfIntegration.IClientChannelBuilder`1">
            <summary>
            The contract for building client channels.
            </summary>
            <typeparam name="M">The <see cref="T:Castle.Facilities.WcfIntegration.IWcfClientModel"/> type.</typeparam>
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.IClientChannelBuilder`1.GetChannelCreator(`0,Castle.Facilities.WcfIntegration.IWcfBurden@)">
            <summary>
            Get a delegate capable of creating channels.
            </summary>
            <param name="clientModel">The client model.</param>
            <param name="burden">Receives the client burden.</param>
            <returns>The <see cref="T:Castle.Facilities.WcfIntegration.ChannelCreator"/></returns>
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.IClientChannelBuilder`1.GetChannelCreator(`0,System.Type,Castle.Facilities.WcfIntegration.IWcfBurden@)">
            <summary>
            Get a delegate capable of creating channels.
            </summary>
            <param name="clientModel">The client model.</param>
            <param name="contract">The contract override.</param>
            <param name="burden">Receives the client burden.</param>
            <returns>The <see cref="T:Castle.Facilities.WcfIntegration.ChannelCreator"/></returns>
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.AbstractChannelBuilder`1.GetChannelCreator(`0,Castle.Facilities.WcfIntegration.IWcfBurden@)">
            <summary>
            Get a delegate capable of creating channels.
            </summary>
            <param name="clientModel">The client model.</param>
            <param name="burden">Receives the client burden.</param>
            <returns>The <see cref="T:Castle.Facilities.WcfIntegration.ChannelCreator"/></returns>
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.AbstractChannelBuilder`1.GetChannelCreator(`0,System.Type,Castle.Facilities.WcfIntegration.IWcfBurden@)">
            <summary>
            Get a delegate capable of creating channels.
            </summary>
            <param name="clientModel">The client model.</param>
            <param name="contract">The contract override.</param>
            <param name="burden">Receives the client burden.</param>
            <returns>The <see cref="T:Castle.Facilities.WcfIntegration.ChannelCreator"/></returns>
        </member>
        <member name="T:Castle.Facilities.WcfIntegration.IWcfClientModel">
            <summary>
            Contract for all WCF client models.
            </summary>
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.IWcfClientModel.ForEndpoint(Castle.Facilities.WcfIntegration.IWcfEndpoint)">
            <summary>
            Creates a copy of the <see cref="T:Castle.Facilities.WcfIntegration.IWcfClientModel"/>
            using the supplied endpoint.
            </summary>
            <returns>The client model copy.</returns>
        </member>
        <member name="P:Castle.Facilities.WcfIntegration.IWcfClientModel.Contract">
            <summary>
            Gets the endpoint contract.
            </summary>
        </member>
        <member name="P:Castle.Facilities.WcfIntegration.IWcfClientModel.Endpoint">
            <summary>
            Gets the endpoint of the service.
            </summary>
        </member>
        <member name="P:Castle.Facilities.WcfIntegration.IWcfClientModel.Extensions">
            <summary>
            Gets the service extensions.
            </summary>
        </member>
        <member name="T:Castle.Facilities.WcfIntegration.Client.AbstractChannelFactoryAware">
            <summary>
            Abstarct implementation of <see cref="T:Castle.Facilities.WcfIntegration.IChannelFactoryAware"/>
            </summary>
        </member>
        <member name="T:Castle.Facilities.WcfIntegration.IChannelFactoryAware">
            <summary>
            Extension for managing the lifecycle of a ChannelFactory.
            </summary>
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.IChannelFactoryAware.Created(System.ServiceModel.ChannelFactory)">
            <summary>
            Called when a <see cref="T:System.ServiceModel.ChannelFactory"/> is created.
            </summary>
            <param name="channelFactory">The channel factory.</param>
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.IChannelFactoryAware.Opening(System.ServiceModel.ChannelFactory)">
            <summary>
            Called when a <see cref="T:System.ServiceModel.ChannelFactory"/> is opening.
            </summary>
            <param name="channelFactory">The channel factory.</param>
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.IChannelFactoryAware.Opened(System.ServiceModel.ChannelFactory)">
            <summary>
            Called when a <see cref="T:System.ServiceModel.ChannelFactory"/> opened.
            </summary>
            <param name="channelFactory">The channel factory.</param>
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.IChannelFactoryAware.Closing(System.ServiceModel.ChannelFactory)">
            <summary>
            Called when a <see cref="T:System.ServiceModel.ChannelFactory"/> is closing.
            </summary>
            <param name="channelFactory">The channel factory.</param>
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.IChannelFactoryAware.Closed(System.ServiceModel.ChannelFactory)">
            <summary>
            Called when a <see cref="T:System.ServiceModel.ChannelFactory"/> closed.
            </summary>
            <param name="channelFactory">The channel factory.</param>
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.IChannelFactoryAware.Faulted(System.ServiceModel.ChannelFactory)">
            <summary>
            Called when a <see cref="T:System.ServiceModel.ChannelFactory"/> faulted.
            </summary>
            <param name="channelFactory">The channel factory.</param>
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.Client.AbstractChannelFactoryAware.Created(System.ServiceModel.ChannelFactory)">
            <inheritdoc />
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.Client.AbstractChannelFactoryAware.Opening(System.ServiceModel.ChannelFactory)">
            <inheritdoc />
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.Client.AbstractChannelFactoryAware.Opened(System.ServiceModel.ChannelFactory)">
            <inheritdoc />
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.Client.AbstractChannelFactoryAware.Closing(System.ServiceModel.ChannelFactory)">
            <inheritdoc />
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.Client.AbstractChannelFactoryAware.Closed(System.ServiceModel.ChannelFactory)">
            <inheritdoc />
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.Client.AbstractChannelFactoryAware.Faulted(System.ServiceModel.ChannelFactory)">
            <inheritdoc />
        </member>
        <member name="T:Castle.Facilities.WcfIntegration.WcfClient">
            <summary>
            Simplifies registration of a list of WCF client channels.
            </summary>
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.WcfClient.ForChannels(Castle.Facilities.WcfIntegration.IWcfClientModel[])">
            <summary>
            Prepares to register a list of WCF client channels.
            </summary>
            <param name="channels">The channels.</param>
            <returns>The <see cref="T:Castle.Facilities.WcfIntegration.WcfClientDescriptor"/></returns>
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.WcfClient.ForChannels(System.Collections.Generic.IEnumerable{Castle.Facilities.WcfIntegration.IWcfClientModel})">
            <summary>
            Prepares to register a list of WCF client channels.
            </summary>
            <param name="channels">The channels.</param>
            <returns>The <see cref="T:Castle.Facilities.WcfIntegration.WcfClientDescriptor"/></returns>
        </member>
        <member name="T:Castle.Facilities.WcfIntegration.WcfClientDescriptor">
            <summary>
            Describes a list of WCF channels to register.
            </summary>
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.WcfClientDescriptor.Configure(System.Action{Castle.MicroKernel.Registration.ComponentRegistration})">
            <summary>
            Allows customized configurations of the channels.
            </summary>
            <param name="configurer">The configuration action.</param>
            <returns></returns>
        </member>
        <member name="T:Castle.Facilities.WcfIntegration.IWcfServiceHost">
            <summary>
            Contract extension for <see cref="T:System.ServiceModel.ServiceHost"/>.
            </summary>
        </member>
        <member name="E:Castle.Facilities.WcfIntegration.IWcfServiceHost.EndpointCreated">
            <summary>
            Raised when a service host creates an endpoint.
            </summary>
        </member>
        <member name="T:Castle.Facilities.WcfIntegration.DefaultServiceHostBuilder">
            <summary>
            The default implementation of <see cref="T:Castle.Facilities.WcfIntegration.IServiceHostBuilder`1"/>.
            </summary>
        </member>
        <member name="T:Castle.Facilities.WcfIntegration.IServiceHostBuilder`1">
            <summary>
            The contract for building service hosts.
            </summary>
            <typeparam name="M">The <see cref="T:Castle.Facilities.WcfIntegration.IWcfServiceModel"/> type.</typeparam>
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.IServiceHostBuilder`1.Build(Castle.Core.ComponentModel,`0,System.Uri[])">
            <summary>
            Builds a service host.
            </summary>
            <param name="model">The component model.</param>
            <param name="serviceModel">The service model.</param>
            <param name="baseAddresses">The base addresses.</param>
            <returns>The service host.</returns>
            
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.IServiceHostBuilder`1.Build(Castle.Core.ComponentModel,System.Uri[])">
            <summary>
             Builds a service host for a hosted environment.
            </summary>
            <param name="model">The component model.</param>
            <param name="baseAddresses">The base addresses.</param>
            <returns>The service host.</returns>
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.IServiceHostBuilder`1.Build(System.Type,System.Uri[])">
            <summary>
             Builds a service host for a hosted environment.
            </summary>
            <param name="serviceType">The service type.</param>
            <param name="baseAddresses">The base addresses.</param>
            <returns>The service host.</returns>
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.DefaultServiceHostBuilder.#ctor(Castle.MicroKernel.IKernel)">
            <summary>
            Constructs a new <see cref="T:Castle.Facilities.WcfIntegration.DefaultServiceHostBuilder"/>.
            </summary>
            <param name="kernel">The kernel.</param>
        </member>
        <member name="T:Castle.Facilities.WcfIntegration.IWcfServiceModel">
            <summary>
            Contract for all WCF service models.
            </summary>
        </member>
        <member name="P:Castle.Facilities.WcfIntegration.IWcfServiceModel.IsHosted">
            <summary>
            Determines if the service will be hosted.
            </summary>
        </member>
        <member name="P:Castle.Facilities.WcfIntegration.IWcfServiceModel.ShouldOpenEagerly">
            <summary>
            Determines if the service will be opened immediately
            regardless of unsatisifed dependencies.
            </summary>
        </member>
        <member name="P:Castle.Facilities.WcfIntegration.IWcfServiceModel.BaseAddresses">
            <summary>
            Gets the service base addresses.
            </summary>
        </member>
        <member name="P:Castle.Facilities.WcfIntegration.IWcfServiceModel.Endpoints">
            <summary>
            Gets the service endpoints.
            </summary>
        </member>
        <member name="P:Castle.Facilities.WcfIntegration.IWcfServiceModel.Extensions">
            <summary>
            Gets the service extensions.
            </summary>
        </member>
        <member name="T:Castle.Facilities.WcfIntegration.Rest.RestServiceHostBuilder">
            <summary>
            Implementation of <see cref="T:Castle.Facilities.WcfIntegration.IServiceHostBuilder`1"/>. for restful services.
            </summary>
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.Rest.RestServiceHostBuilder.#ctor(Castle.MicroKernel.IKernel)">
            <summary>
            Constructs a new <see cref="T:Castle.Facilities.WcfIntegration.Rest.RestServiceHostBuilder"/>.
            </summary>
            <param name="kernel">The kernel.</param>
        </member>
        <member name="T:Castle.Facilities.WcfIntegration.Service.AbstractServiceHostAware">
            <summary>
            Abstarct implementation of <see cref="T:Castle.Facilities.WcfIntegration.IServiceHostAware"/>
            </summary>
        </member>
        <member name="T:Castle.Facilities.WcfIntegration.IServiceHostAware">
            <summary>
            Extension for managing the lifecycle of a ServiceHost.
            </summary>
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.IServiceHostAware.Created(System.ServiceModel.ServiceHost)">
            <summary>
            Called when a <see cref="T:System.ServiceModel.ServiceHost"/> is created.
            </summary>
            <param name="serviceHost">The service host.</param>
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.IServiceHostAware.Opening(System.ServiceModel.ServiceHost)">
            <summary>
            Called when a <see cref="T:System.ServiceModel.ServiceHost"/> is opening.
            </summary>
            <param name="serviceHost">The service host.</param>
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.IServiceHostAware.Opened(System.ServiceModel.ServiceHost)">
            <summary>
            Called when a <see cref="T:System.ServiceModel.ServiceHost"/> opened.
            </summary>
            <param name="serviceHost">The service host.</param>
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.IServiceHostAware.Closing(System.ServiceModel.ServiceHost)">
            <summary>
            Called when a <see cref="T:System.ServiceModel.ServiceHost"/> is closing.
            </summary>
            <param name="serviceHost">The service host.</param>
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.IServiceHostAware.Closed(System.ServiceModel.ServiceHost)">
            <summary>
            Called when a <see cref="T:System.ServiceModel.ServiceHost"/> closed.
            </summary>
            <param name="serviceHost">The service host.</param>
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.IServiceHostAware.Faulted(System.ServiceModel.ServiceHost)">
            <summary>
            Called when a <see cref="T:System.ServiceModel.ServiceHost"/> faulted.
            </summary>
            <param name="serviceHost">The service host.</param>
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.Service.AbstractServiceHostAware.Created(System.ServiceModel.ServiceHost)">
            <inheritdoc />
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.Service.AbstractServiceHostAware.Opening(System.ServiceModel.ServiceHost)">
            <inheritdoc />
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.Service.AbstractServiceHostAware.Opened(System.ServiceModel.ServiceHost)">
            <inheritdoc />
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.Service.AbstractServiceHostAware.Closing(System.ServiceModel.ServiceHost)">
            <inheritdoc />
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.Service.AbstractServiceHostAware.Closed(System.ServiceModel.ServiceHost)">
            <inheritdoc />
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.Service.AbstractServiceHostAware.Faulted(System.ServiceModel.ServiceHost)">
            <inheritdoc />
        </member>
        <member name="T:Castle.Facilities.WcfIntegration.EndpointCreatedArgs">
            <summary>
            Event to indicate an endpoint was created.
            </summary>
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.EndpointCreatedArgs.#ctor(System.ServiceModel.Description.ServiceEndpoint)">
            <summary>
            Creates a new <see cref="T:Castle.Facilities.WcfIntegration.EndpointCreatedArgs"/>.
            </summary>
            <param name="endpoint">The created endpoint.</param>
        </member>
        <member name="P:Castle.Facilities.WcfIntegration.EndpointCreatedArgs.Endpoint">
            <summary>
            Gets the newly created endpoint.
            </summary>
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.WindsorDependencyInjectionServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
            <summary>
            Provides the ability to inspect the service host and the service description to confirm that the service can run successfully.
            </summary>
            <param name="serviceHostBase">The service host that is currently being constructed.</param>
            <param name="serviceDescription">The service description.</param>
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.WindsorDependencyInjectionServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
            <summary>
            Provides the ability to pass custom data to binding elements to support the contract implementation.
            </summary>
            <param name="serviceHostBase">The host of the service.</param>
            <param name="bindingParameters">Custom objects to which binding elements have access.</param>
            <param name="serviceDescription">The service description of the service.</param>
            <param name="endpoints">The service endpoints.</param>
        </member>
        <member name="T:Castle.Facilities.WcfIntegration.WindsorInstanceProvider">
            <summary>
            Initialize a service using Windsor
            </summary>
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.WindsorInstanceProvider.#ctor(Castle.MicroKernel.IKernel,Castle.Core.ComponentModel,System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Facilities.WcfIntegration.WindsorInstanceProvider" /> class.
            </summary>
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.WindsorInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)">
            <summary>
            Returns a service object given the specified <see cref="T:System.ServiceModel.InstanceContext"></see> object.
            </summary>
            
            <returns>
            A user-defined service object.
            </returns>
            
            <param name="instanceContext">The current <see cref="T:System.ServiceModel.InstanceContext"></see> object.</param>
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.WindsorInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)">
            <summary>
            Returns a service object given the specified <see cref="T:System.ServiceModel.InstanceContext"></see> object.
            </summary>
            
            <returns>
            The service object.
            </returns>
            
            <param name="message">The message that triggered the creation of a service object.</param>
            <param name="instanceContext">The current <see cref="T:System.ServiceModel.InstanceContext"></see> object.</param>
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.WindsorInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)">
            <summary>
            Called when an <see cref="T:System.ServiceModel.InstanceContext"></see> object recycles a service object.
            </summary>
            
            <param name="instanceContext">The service's instance context.</param>
            <param name="instance">The service object to be recycled.</param>
        </member>
        <member name="T:Castle.Facilities.WcfIntegration.ChannelCreator">
            <summary>
            Delegate for creating channels.
            </summary>
        </member>
        <member name="T:Castle.Facilities.WcfIntegration.IWcfEndpoint">
            <summary>
            Contract for all WCF endpoints.
            </summary>
        </member>
        <member name="M:Castle.Facilities.WcfIntegration.IWcfEndpoint.Accept(Castle.Facilities.WcfIntegration.IWcfEndpointVisitor)">
            <summary>
            Supports management of endpoints.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="P:Castle.Facilities.WcfIntegration.IWcfEndpoint.Contract">
            <summary>
            Gets the endpoint contract.
            </summary>
        </member>
        <member name="P:Castle.Facilities.WcfIntegration.IWcfEndpoint.Extensions">
            <summary>
            Gets the service extensions.
            </summary>
        </member>
        <member name="T:Castle.Facilities.WcfIntegration.WcfFacility">
            <summary>
            Facility to simplify the management of WCF clients and services. 
            </summary>
        </member>
    </members>
</doc>
